ext {
    versions = [:]
    libraries = [:]
}

versions.httpcore = '5.0'
versions.httpclient = '5.0'
versions.jackson = '2.9.6'
versions.junit = '5.6.0'
versions.assertj = '3.15.0'
versions.slf4j = '1.7.25'

libraries.httpcore = "org.apache.httpcomponents.core5:httpcore5:${versions.httpcore}"
libraries.httpclient = "org.apache.httpcomponents.client5:httpclient5:${versions.httpclient}"
libraries.jackson = "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
libraries.junit = "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
libraries.assertj = "org.assertj:assertj-core:${versions.assertj}"
libraries.slf4jimpl = "org.slf4j:slf4j-simple:${versions.slf4j}"

allprojects {

    group 'com.github.ok2c.hc5'
    version '0.2.1-SNAPSHOT'

    ext.releaseVersion = !version.endsWith("-SNAPSHOT")

    repositories {
        mavenCentral()
    }

}

subprojects {

    apply plugin: 'java'

    sourceCompatibility = 1.8

    javadoc {
        options.addBooleanOption('Xdoclint:-missing', true)
    }

    task javadocJar(type: Jar) {
        classifier 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    apply plugin: 'maven-publish'

    publishing {
        publications {
            mavenArtifacts(MavenPublication) {
                from components.java
                artifact javadocJar
                artifact sourcesJar

                pom {
                    name = "JSON for Apache HC 5.0"
                    description = 'Asynchronous JSON message processors for Apache HttpComponents 5.0'
                    url = 'https://github.com/ok2c/httpcomponents-jackson'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'ok2c'
                            name = 'Oleg Kalnichevski'
                            email = 'olegk@apache.org'
                        }
                    }
                    scm {
                        connection = 'scm:git:git@github.com:ok2c/httpcomponents-jackson.git'
                        developerConnection = 'scm:git:ssh://github.com:ok2c/httpcomponents-jackson.git'
                        url = 'https://github.com/ok2c/httpcomponents-jackson'
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                url = releaseVersion ? releasesRepoUrl : snapshotsRepoUrl

                if (project.ext.has('ossrh.user')) {
                    credentials {
                        username = project.ext.'ossrh.user'
                        password = project.ext.'ossrh.password'
                    }
                }
            }
        }
    }

    apply plugin: 'signing'

    if (releaseVersion) {
        signing {
            sign publishing.publications.mavenArtifacts
        }
    }

}

def askSigningKeyPassphrase() {
    def keyId = project.ext.has('signing.keyId') ? project.ext.'signing.keyId' : null
    def password = project.ext.has('signing.password') ? project.ext.'signing.password' : null
    if (keyId && !password) {
        def console = System.console()
        if (console) {
            console.println "\n> Please provide password for PGP key ${keyId}: "
            char[] raw = console.readPassword()
            project.ext.'signing.password' = new String(raw)
        } else {
            logger.warn 'Console is not available'
        }
    }
}

def askRepoPassword(MavenArtifactRepository repository) {
    def credentials = repository.credentials
    if (credentials.username && !credentials.password) {
        def console = System.console()
        if (console) {
            console.println "\n> Please provide password for user ${credentials.username}: "
            char[] raw = console.readPassword()
            credentials.password = new String(raw)
        } else {
            logger.warn 'Console is not available'
        }
    }
}

gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
    taskGraph.allTasks.findAll { task -> task instanceof Sign }.each { task ->
        task.doFirst { askSigningKeyPassphrase() }
    }
    taskGraph.allTasks.findAll { task -> task instanceof PublishToMavenRepository }.each { task ->
        task.doFirst { askRepoPassword(task.repository) }
    }
}
